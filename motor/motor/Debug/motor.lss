
motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000118  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a1c  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a7  00000000  00000000  00000c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a7f  00000000  00000000  000014f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001f78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00012cac  00000000  00000000  00001ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d5  00000000  00000000  00014c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00014d71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000006a6  00000000  00000000  00014da9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	21 d0       	rcall	.+66     	; 0xdc <main>
  9a:	3c c0       	rjmp	.+120    	; 0x114 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <board_init>:
#include <board.h>
#include <compiler.h>
#include <conf_board.h>

void board_init(void)
{
  9e:	08 95       	ret

000000a0 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
  a0:	04 c0       	rjmp	.+8      	; 0xaa <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
  a2:	61 50       	subi	r22, 0x01	; 1
  a4:	71 09       	sbc	r23, r1
  a6:	81 09       	sbc	r24, r1
  a8:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
  aa:	61 15       	cp	r22, r1
  ac:	71 05       	cpc	r23, r1
  ae:	81 05       	cpc	r24, r1
  b0:	91 05       	cpc	r25, r1
  b2:	b9 f7       	brne	.-18     	; 0xa2 <__portable_avr_delay_cycles+0x2>
  b4:	08 95       	ret

000000b6 <setMotorDir>:
	}
}

void setMotorDir(bool dir){
	//using PORTC0 for pulse dir
	if(dir){
  b6:	88 23       	and	r24, r24
  b8:	11 f0       	breq	.+4      	; 0xbe <setMotorDir+0x8>
		PORTB |= (1<<PORTB0);
  ba:	28 9a       	sbi	0x05, 0	; 5
  bc:	08 95       	ret
	}
	else{
		PORTB &= ~(1<<PORTB0);
  be:	28 98       	cbi	0x05, 0	; 5
  c0:	08 95       	ret

000000c2 <moveMotor>:
	}
}

void moveMotor(int steps){
	PORTB |= (1<<PORTB1);
  c2:	29 9a       	sbi	0x05, 1	; 5
	delay_ms(1);
  c4:	67 ea       	ldi	r22, 0xA7	; 167
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	e9 df       	rcall	.-46     	; 0xa0 <__portable_avr_delay_cycles>
	PORTB &= ~(1<<PORTB1);
  ce:	29 98       	cbi	0x05, 1	; 5
	delay_ms(1);
  d0:	67 ea       	ldi	r22, 0xA7	; 167
  d2:	70 e0       	ldi	r23, 0x00	; 0
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	e3 cf       	rjmp	.-58     	; 0xa0 <__portable_avr_delay_cycles>
  da:	08 95       	ret

000000dc <main>:

int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
  dc:	e0 df       	rcall	.-64     	; 0x9e <board_init>
	/* Insert application code here, after the board has been initialized. */
	
	int dir = 1;
	DDRB = (1<<DDB0) | (1<<DDB1); //set GPIO0 and GPIO1 as outputs
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	84 b9       	out	0x04, r24	; 4
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
	/* Insert application code here, after the board has been initialized. */
	
	int dir = 1;
  e2:	01 e0       	ldi	r16, 0x01	; 1
  e4:	10 e0       	ldi	r17, 0x00	; 0
	
	while(1){
		for(int i = 0; i < 10000; ++i){
			moveMotor(1);
		}
		dir = !dir;
  e6:	ff 24       	eor	r15, r15
  e8:	f3 94       	inc	r15
  ea:	e1 2c       	mov	r14, r1
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
	/* Insert application code here, after the board has been initialized. */
	
	int dir = 1;
  ec:	c0 e1       	ldi	r28, 0x10	; 16
  ee:	d7 e2       	ldi	r29, 0x27	; 39
	DDRB = (1<<DDB0) | (1<<DDB1); //set GPIO0 and GPIO1 as outputs
	
	while(1){
		for(int i = 0; i < 10000; ++i){
			moveMotor(1);
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	e6 df       	rcall	.-52     	; 0xc2 <moveMotor>
  f6:	21 97       	sbiw	r28, 0x01	; 1
	
	int dir = 1;
	DDRB = (1<<DDB0) | (1<<DDB1); //set GPIO0 and GPIO1 as outputs
	
	while(1){
		for(int i = 0; i < 10000; ++i){
  f8:	d9 f7       	brne	.-10     	; 0xf0 <main+0x14>
			moveMotor(1);
		}
		dir = !dir;
  fa:	8f 2d       	mov	r24, r15
  fc:	01 2b       	or	r16, r17
  fe:	09 f0       	breq	.+2      	; 0x102 <main+0x26>
 100:	8e 2d       	mov	r24, r14
 102:	08 2f       	mov	r16, r24
		setMotorDir(dir);
 104:	10 e0       	ldi	r17, 0x00	; 0
 106:	d7 df       	rcall	.-82     	; 0xb6 <setMotorDir>
		delay_ms(50);
 108:	6e e8       	ldi	r22, 0x8E	; 142
 10a:	70 e2       	ldi	r23, 0x20	; 32
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	c7 df       	rcall	.-114    	; 0xa0 <__portable_avr_delay_cycles>
	}
 112:	ec cf       	rjmp	.-40     	; 0xec <main+0x10>

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>
